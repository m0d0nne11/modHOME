# NOTE: for Firefox use http://llproxy.llan.ll.mit.edu/proxy.pac
export FYIfirefoxProxy="http://llproxy.llan.ll.mit.edu/proxy.pac" ;

# Function DEFINITIONS here, INVOCATIONS (if any) at bottom...

function llproxy()  {
    # MIT/LL proxy environment variables
    # Curl uses variables (other than http_proxy) with all caps
    # ALL_PROXY is a convenient "catchall" (see 'man curl' for more)
    #
    # Please note that using the environment variables
    # defined herein for our github server requires that you
    # either fully qualify the hostname of llcad-github (as
    # llcad-github.llan.ll.mit.edu) or else in your local
    # bashrc/profile you augment the no_proxy list with the
    # short-name (export no_proxy=$no_proxy,llcad-github) to
    # prevent git from attempting proxy connections for
    # internal websites (which the MITLL proxy will refuse).
    #

    export    no_proxy=localhost,127.0.0.1,.llan.ll.mit.edu  ;
    export    NO_PROXY="${no_proxy}"                         ;

    export  http_proxy="http://llproxy.llan.ll.mit.edu:8080" ;
    export  HTTP_PROXY="${http_proxy}"                       ;
    export   all_proxy="${http_proxy}"                       ;
    export   ALL_PROXY="${http_proxy}"                       ;
    export   ftp_proxy="${http_proxy}"                       ;
    export   FTP_PROXY="${http_proxy}"                       ;
    export https_proxy="${http_proxy}"                       ;
    export HTTPS_PROXY="${http_proxy}"                       ;
    export       proxy="${http_proxy}"                       ;
    export       PROXY="${http_proxy}"                       ;
}

function llproxyLynx() {
    llproxy                                 ;
    export        cso_proxy="${http_proxy}" ;
    export        CSO_PROXY="${http_proxy}" ;
    export     finger_proxy="${http_proxy}" ;
    export     FINGER_PROXY="${http_proxy}" ;
    export     gopher_proxy="${http_proxy}" ;
    export     GOPHER_PROXY="${http_proxy}" ;
    export   newspost_proxy="${http_proxy}" ;
    export   NEWSPOST_PROXY="${http_proxy}" ;
    export       news_proxy="${http_proxy}" ;
    export       NEWS_PROXY="${http_proxy}" ;
    export  newsreply_proxy="${http_proxy}" ;
    export  NEWSREPLY_PROXY="${http_proxy}" ;
    export       nntp_proxy="${http_proxy}" ;
    export       NNTP_PROXY="${http_proxy}" ;
    export  snewspost_proxy="${http_proxy}" ;
    export  SNEWSPOST_PROXY="${http_proxy}" ;
    export      snews_proxy="${http_proxy}" ;
    export      SNEWS_PROXY="${http_proxy}" ;
    export snewsreply_proxy="${http_proxy}" ;
    export SNEWSREPLY_PROXY="${http_proxy}" ;
    export       wais_proxy="${http_proxy}" ;
    export       WAIS_PROXY="${http_proxy}" ;

}

# Unset all proxy-related vars set by llproxy()
function zaproxy()  {
    unset no_proxy NO_PROXY http_proxy HTTP_PROXY all_proxy ALL_PROXY ftp_proxy FTP_PROXY https_proxy HTTPS_PROXY proxy PROXY                                                                    ;
}

# Utter some commands that can be used to
# make Ubuntu systems LLAN/ISS2 compliant:
#
function ISS2ansible()  {
cat <<EOF
wget short.llan.ll.mit.edu/bootstrap ; chmod a+x bootstrap ; ./bootstrap
apt-get update ; apt-get install vim ssh git ansible
git clone -b gui https://llcad-github.llan.ll.mit.edu/div6sysadmin/ansible-iss2.git
( cd ansible-iss2/ && ansible-galaxy install -r requirements.yml -p roles --force   )
( cd ansible-iss2/ && sed -i -e "s/ mitll_divnum:.*$/ mitll_divnum: '06'/" site.yml )
( cd ansible-iss2/ && ansible-playbook -c local -i localhost, site.yml              )

echo LLANcompliance/EXAMPLE/usr/share/lightdm/lightdm.conf.d/50-disable-userlist.conf
echo git clone https://github.com/m0d0nne11/modHOME
EOF
}

