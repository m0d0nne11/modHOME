#############################################################
# Nasty hack to allow discovery of whether a given RS232
# cable is wired as a NULL modem after connecting its ends
# to two serial ports on the current machine.  Some of the
# gymnastics here are a clumsy attempt to get around the
# problem where (it seems that) further attempts to read
# from some serial port (tty drivers) hang until they've
# been opened and closed.
#
# Another complication is setting up reader and writer
# tasks and then managing them without wedging ourselves...
#
# The initString was obtained (on a Debian potato system
# running a 2.4.18 kernel on 3 July 2002) by setting
# a serial port to a known-good state and then saying:
#
#  stty -g <thatSerialPort
#
      myPID=$$
       tty0=${TTY0DEV:-/dev/ttyS0}                # Maybe /dev/ttyUSB0 instead?
       tty1=${TTY1DEV:-/dev/ttyS1}                # Maybe /dev/ttyUSB1 instead?
  timeStamp=$(date '+%Y%m%d%H%M%S')
  tempFile0=/tmp/tempFile0$timeStamp
  tempFile1=/tmp/tempFile1$timeStamp
#initString="1:0:800008bd:0:3:1c:7f:15:4:5:1:0:11:13:1a:0:12:f:17:16:0:0:2f:0:0:0:0:0:0:0:0:0:0:0:0:0" #MCLX
#initString="1000:4:fbf:a30:3:1c:7f:15:4:1:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0"  #WSI-RHEL3
 initString="500:5:cbd:8a3b:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0"  #WSI-CentOS

###############################################################################
function fail()  {
    echo "FAIL:" $@
    kill -9 $myPID
}

###############################################################################
test -f $tempFile0                && fail "Temp file $tempFile0 already exists"
test -f $tempFile1                && fail "Temp file $tempFile1 already exists"

#
# Gratuitous open/close sequences...
#
pid0=$(( dd bs=1 count=1 if=$tty0 >/dev/null 2>&1 & echo $! ) )
pid1=$(( dd bs=1 count=1 if=$tty1 >/dev/null 2>&1 & echo $! ) )
sleep 2
( kill -9 $pid0 ) >/dev/null 2>&1
( kill -9 $pid1 ) >/dev/null 2>&1

#
# Init serial ports to known values, same baud rates, etc...
#
wait
rzq0=$(stty -g <$tty0)    || fail "Couldn't read current settings from $tty0"
rzq1=$(stty -g <$tty1)    || fail "Couldn't read current settings from $tty1"
stty $initString <$tty0   || (                     fail "Couldn't init $tty0" )
stty $initString <$tty1   || ( stty $rzq0 <$tty0 ; fail "Couldn't init $tty1" )

#
# Pretty much committed from here on out.
# Prep the Reader task...
#
( while [ ! -f $tempFile1 ]; do :; done; read -t 2 ttyData <$tty1 ; echo ttyData $ttyData >$tempFile1 ) &
readerPID=$!

#
# ...and the Writer task...
#
( while [ ! -f $tempFile0 ]; do :; done; rm $tempFile0 ; echo isNullModem >$tty0 ) &
writerPID=$!

#
# ...Signal them to start...
#
>$tempFile1
>$tempFile0

#
# ...then see if the Reader got the Writer's message.
#
sleep 2
if fgrep isNullModem $tempFile1 >/dev/null 2>&1
then
    echo -n "SUCCESS: null modem detected"
    result=0
else
    echo -n "FAIL (apparently NOT a null modem)"
    ( kill -9 $readerPID ) >/dev/null 2>&1
#   ( kill -9 $writerPID ) >/dev/null 2>&1

    #
    # A parting gratuitous open/close sequence...
    #
    pid0=$(( dd bs=1 count=1 if=$tty0 >/dev/null 2>&1 & echo $! ) )
    pid1=$(( dd bs=1 count=1 if=$tty1 >/dev/null 2>&1 & echo $! ) )
    sleep 2
    ( kill -9 $pid0 ) >/dev/null 2>&1
    ( kill -9 $pid1 ) >/dev/null 2>&1
    result=1
fi

#
# Restore previous tty states...
#
echo " - cleaning up..."
pid0=$(( stty $rzq0 <$tty0 >/dev/null & echo $! ) )
pid1=$(( stty $rzq1 <$tty1 >/dev/null & echo $! ) )
sleep 2
( kill -9 $pid0 ) >/dev/null 2>&1
( kill -9 $pid1 ) >/dev/null 2>&1

rm -f $tempFile1 $tempFile0

exit $result

