#!/bin/bash
#
# It's sometimes necessary for processes (like SSH sessions or
# cron-launched scripts) that aren't associated with a given local X
# display to become clients of the local X server in order that warnings
# and such can be displayed.  This script makes it possible to obtain
# current values for some environment variables (such as XAUTHORITY and
# DISPLAY) that are necessary to authenticate to and connect with the
# local X server.  Assuming that a given non-root user owns the current
# X session, this script only works for that user or for root.
#

export CIVILIAN=mod
export CIVILIAN_HOMEDIR=`eval echo ~"${CIVILIAN}"`

export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/bin/X11:/usr/sbin:/bin:/sbin:/etc:.

myName=$0
  argv="$@"

test -n "$MIKE_DEBUG" && set -xv

###############################################################################
#
function FAIL()  {
cat <<EOF
$FUNCNAME: $@
usage:  $myName [-a] [-d]
        -a Show the name of an X authority file
        -d Show an X DISPLAY value
        -h Show this Help text
EXAMPLE:
    To pop an xclock window on the local display:
        export XAUTHORITY=\`$myName -a\`
        export    DISPLAY=\`$myName -d\`
        xclock
EOF

    exit 1
}

###############################################################################
  Try to find and report the PID of a process that can reasonably be assumed
  to be authorized to use the local X display, depending on which flavor
  of OS we're running.  If LOCALX_PROGNAME is defined in the environment
  we use that as the name of the program to take our target PID from, else
  we choose based on whether we are running CentOS or RHEL3 (currently same
  one for both)

function XcapablePID()  {
    if [ -z "$LOCALX_PROGNAME" ] ; then         # No override from environment?
        if [ -r /etc/redhat-release ] ; then
            if fgrep -qi centos /etc/redhat-release ; then
                LOCALX_PROGNAME=icewm-session
            else
                LOCALX_PROGNAME=icewm-session        # Not CentOS? assume RHEL3
            fi
        else
            LOCALX_PROGNAME=ctwm                                     # XXX_MIKE
        fi
    fi
    pgrep -x "$LOCALX_PROGNAME"                 # Returns failure if not found.
}

###############################################################################
# Utter the basename for the specified PID
#
function basenameForPID()  {
    local pid=$1
    local cmd
    local other

    if ! read cmd other < <(xargs -0 -l1 < /proc/$pid/cmdline 2>/dev/null)
    then
        return 1
    fi
    cmd=$(echo $cmd | sed -e 's/^-//')
    basename $cmd
}

###############################################################################
# Utter the name of a file we can use to authenticate to the local X server.
#
# FirstChoice: the current value of the XAUTHORITY variable as extracted
# from the environment of some likely candidate process.
#
# Fallback1: "${CIVILIAN_HOMEDIR}"/.Xauthority
#
# Fallback2: Whatever file is mentioned on the X server command line.
#
function localXAUTHORITY()  {
    local x
    local targetPID

    if targetPID=`XcapablePID` ; then
        if x=$(fgrep -e 'XAUTHORITY=' <(xargs -0 -l1 < /proc/$targetPID/environ \
                                        | while read f ; do echo $f ; done))
        then
            ( eval $x ; echo "$XAUTHORITY")
            return 0
        fi
    fi

    if [ -r  "${CIVILIAN_HOMEDIR}"/.Xauthority ] ; then
        echo "${CIVILIAN_HOMEDIR}"/.Xauthority
        return 0
    fi

    for x in $(ps -eaflwlw | fgrep X | fgrep auth | sed -e 's/^.*-auth  *//' -e 's/ .*$//')
    do
        if [ -r  "${x}" ] ; then
            echo "${x}"
            return 0
        fi
    done

    if sudo -H -u "${CIVILIAN}" xauth extract - $HOSTNAME:0 | /usr/X11R6/bin/xauth merge -
    then
        echo "${CIVILIAN_HOMEDIR}"/.Xauthority
        return 0
    fi

    echo UsableXAUTHORITYfileNotFound
    return 1
}

###############################################################################
# Utter the current value of the DISPLAY variable as extracted from the
# environment of some likely candidate.
#
function localDISPLAY()  {
    local x
    local targetPID

    if targetPID=`XcapablePID` ; then
        if x=$(fgrep -e 'DISPLAY=' <(xargs -0 -l1 < /proc/$targetPID/environ \
                                        | while read f ; do echo $f ; done))
        then
            ( eval $x ; echo "$DISPLAY")
            return 0
        fi
    fi

    echo ":0"
    return 0

    echo UsableDISPLAYnotFound
    return 1
}

###############################################################################
# Functions defined; commence actual execution...
#

currentOptArg=""
while :
do
    getopts "ad" currentOptArg

    case "$currentOptArg" in
    '?')                                                # End of supplied args.
        break
        ;;
    a)
        localXAUTHORITY
        exit
        ;;
    d)
        localDISPLAY
        exit
        ;;
    h)
        FAIL "help..."
        exit 0
        ;;
    *)
        FAIL "Unexpected commandline parameter: $currentOptArg"
        ;;
    esac
done

FAIL                                        # ASSUME: problem if we got here...

