# hashBang line disabled to accommodate Termux's nonstandard filesystem layout...
#!/bin/bash

# lpr -o landscape -o sides=two-sided-long-edge -o cpi=$(lprCPIforWidth $(wc -c))

# To maintain the following list of functions, position (in vi) the cursor on
# the first line in the list and then execute one of the following verbatim:
#
# !}grep -e '^function ' % | awk '{ print $2 }' | sort -bfd | sed -e 's/^/\# /'
# !}grep -e '^function ' % | awk '{ print $2 }' |             sed -e 's/^/\# /'
# FUNCTIONS:

# dbRecordForKey()
# dbRecordGEkey()
# FAIL()

###############################################################################
# Utter the (optional) explanation into the log and then die...
#   
function FAIL()  {
    local msg=""
    if [ $# -lt 1 -o -z "$*" ] ; then
        msg="(unspecified)"
    else
        msg="$@"
    fi

    echo FAIL: "${msg}"

    exit 1
}       
            


# lpr -o landscape -o sides=two-sided-long-edge -o cpi=29
# 0        1         2         3         4         5         6         7         8         9         10        11        12        13        14        15        16        17        18        19        20        21        22        23        24        25        26        27        28        29
# 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890

declare -a db=("")

# Layout of records: lineWidth CPI
db=(
     "10  1"
     "21  2"
     "32  3"
     "42  4"
     "53  5"
     "64  6"
     "74  7"
     "85  8"
     "96  9"
    "106 10"
    "117 11"
    "128 12"
    "138 13"
    "149 14"
    "160 15"
    "170 16"
    "181 17"
    "192 18"
    "202 19"
    "213 20"
    "224 21"
    "234 22"
    "245 23"
    "256 24"
    "266 25"
    "277 26"
    "288 27"
    "298 28"
    "306 29"
)

###############################################################################
# return first db record with specified key $2 = specified value $1
function dbRecordForKey()  {
    local index
    local record
    if [ $# -ne 2 ]
    then
        FAIL "Internal error in $FUNCNAME() - need fieldIndex and key"
    fi

    index=0
    while [ $index -lt ${#db[*]} ]          # Until indexLimit reached...
    do
        record=( ${db[$index]} )       # Index the database for a record.
        case "$1" in
        1|2|3)
            if [ ${record[$[$1 - 1]]} = $2 ]        # Index record for a field.
            then
#               echo "$record"
                echo ${db[$index]}
                return 0                         # First hit terminates search.
            fi
            ;;
        *)
            FAIL "$FUNCNAME() - bogus key value specified"
            ;;
        esac

        let index++
    done
    return 1
}

###############################################################################
# return first db record with specified key $2 >= specified value $1
function dbRecordGEkey()  {
    local index
    local record
    if [ $# -ne 2 ]
    then
        FAIL "Internal error in $FUNCNAME() - need fieldIndex and key"
    fi

    index=0
    while [ $index -lt ${#db[*]} ]          # Until indexLimit reached...
    do
        record=( ${db[$index]} )       # Index the database for a record.
        case "$1" in
        1|2|3)
            if [ ${record[$[$1 - 1]]} -ge $2 ]        # Index record for a field.
            then
#               echo "$record"
                echo ${db[$index]}
                return 0                         # First hit terminates search.
            fi
            ;;
        *)
            FAIL "$FUNCNAME() - bogus key value specified"
            ;;
        esac

        let index++
    done
    return 1
}


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Commence execution...
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


if [ $# -ne 1 ]
then
    FAIL lineWidth not specified
    exit 1
fi

x=$(dbRecordGEkey  1 $1)
read width cpi < <(echo $x)

echo $cpi

exit

