
# Maybe SEE ALSO: http://www.huyng.com/projects/fdn/ for the foundation (fdn) tool

cat <<"END_OF_C_SKELETON"

#include <stdio.h>
#include <stdlib.h>

#ifdef  ENABLE_THESE_IF_NEEDED
#include <unistd.h>                                  /* getopt() and friends */
#include <ctype.h>
#include <string.h>                                  /* strcmp() and friends */
#include <strings.h>
#endif                                      /* #ifdef ENABLE_THESE_IF_NEEDED */

/*
 * ----------------------------------------------------------------------------
 * Constant #definitions
 */
#ifdef  ENABLE_THESE_IF_NEEDED
#undef  TRUE
#undef  FALSE

#define FALSE               (0)
#define TRUE                (!(FALSE))
#endif                                      /* #ifdef ENABLE_THESE_IF_NEEDED */

typedef unsigned       char u8;
typedef   signed       char s8;
typedef unsigned short int  u16;
typedef   signed short int  s16;
typedef   signed long  int  s32;
typedef unsigned long  int  u32;

/*
 * ----------------------------------------------------------------------------
 * GENERAL:
 *  - A "limit" is an asymptotic value - one which cannot be reached.
 *  - A "maximum" is the highest value which CAN be reached.
 */

/*
 * For use with one-dimensional arrays whose size is known at compile time:
 */
#define ARRAY_ELEMENT_COUNT( array ) (sizeof((array)) / sizeof(((array)[0])))
#define ARRAY_INDEX_LIMIT(   array )           ARRAY_ELEMENT_COUNT(array)
#define ARRAY_POINTER_LIMIT( array ) (&((array)[ ARRAY_INDEX_LIMIT(array) ]))
#define ARRAY_INDEX_MAX(     array )            (ARRAY_INDEX_LIMIT(array) - 1)
#define ARRAY_POINTER_MAX(   array ) (&((array)[   ARRAY_INDEX_MAX(array) ]))

/*
 * SAFE_{COPY,CAT} only usable when compiler can determine sizeof(dest)
 */
#define SAFE_COPY( dest, src )                  \
do  {                                           \
        strncpy( (dest), (src), sizeof(dest) ); \
        (dest)[ARRAY_INDEX_MAX(dest)] = 0;      \
} while( 0 )

/*
 * Efficiently append as much as possible of src onto dest
 * without overrunning it.  Not guaranteed to copy all (or
 * even any) of src, but last byte of dest is guaranteed to
 * be NULL afterwards, even if it previously wasn't.
 */
#define SAFE_CAT( dest, src )                   \
do  {                                           \
        size_t l = strlen( dest );              \
                                                \
        if( l < ARRAY_INDEX_MAX(dest) )  {      \
            strncpy( &((dest)[ l ]), (src), (ARRAY_INDEX_MAX(dest) - l)); \
        }                                       \
        (dest)[ARRAY_INDEX_MAX(dest)] = 0;      \
} while( 0 )

/*
 * Slightly less obtusely named string-match operations..
 */
#define MATCH(  x, y )    !strcmp(  (x), (y) )
#define MATCHN( x, y, n ) !strncmp( (x), (y), (n) )

/*
 * Examples of primitive (name,value) mapping
 */
typedef enum  {
    MOE,
    LARRY,
    CURLY,
} thingamajig;

typedef struct nameValueMapEntryStruct  {
    char       *name;
    thingamajig value;
} nameValueMapEntry;

#define NAME_VALUE_MAP_ENTRY( tag ) { name: #tag, value: tag }
#define BOGUS_MAP_VALUE ~0

nameValueMapEntry nameValueMap[] =  {
    NAME_VALUE_MAP_ENTRY( MOE ),
    NAME_VALUE_MAP_ENTRY( LARRY ),
    NAME_VALUE_MAP_ENTRY( CURLY ),
};

/*
 * Binary search; assumes entries are sorted by "value"
 */
char *
entryNameFor(
    u32                value )
{
    nameValueMapEntry *entry;
    signed int         lo = 0;
    signed int         hi = ARRAY_INDEX_MAX( nameValueMap );
    signed int         mid;

    while( lo <= hi ) {                               /* Trouble if unsigned */
        mid = (hi + lo) / 2;
        entry = &(nameValueMap[mid]);

        if( entry->value == value )  {
            return( entry->name );
        }
        if( entry->value > value )  {
            hi = mid - 1;
        } else  {
            lo = mid + 1;
        }
    }
    return 0;
}

/*
 * Linear search; completely unoptimized; should use a hash or something...
 */
u32
entryValueFor(
    char              *name )
{
    nameValueMapEntry *entry;

    for( entry = nameValueMap;
         entry < ARRAY_POINTER_LIMIT( nameValueMap );
         entry++ )
    {
        if( MATCH(  entry->name, name )  )  {
            return( entry->value );
        }
    }
    return( BOGUS_MAP_VALUE );                                      /* Fail. */
}

/*
 * ----------------------------------------------------------------------------
 * "map" is a pointer to an array of unsigned ints.
 * Size of that array is unspecified but is assumed
 * to be large enough to hold the necessary bits.
 */
u32
setBitMapBit(
    u32  index,
    u32 *map    )
{
    u32  bit;
    u32  field;

    bit          = 1 << (index & 0x1f);                         /* Modulo 32 */
    index      >>= 5;                                        /* Divide by 32 */
    field        = map[ index ];
    map[ index ] = field | bit;
    return( field & bit );                          /* Previous state of bit */
}

u32
clearBitMapBit(
    u32  index,
    u32 *map    )
{
    u32  bit;
    u32  field;

    bit          = 1 << (index & 0x1f);                         /* Modulo 32 */
    index      >>= 5;                                        /* Divide by 32 */
    field        = map[ index ];
    map[ index ] = field & ~bit;
    return( field & bit );                          /* Previous state of bit */
}

/*
 * A boolean function
 */
u32
bitMapBitIsSet(
    u32  index,
    u8  *map    )
{
    return( map[ index >> 5 ]  &  (1 << (index & 0x1f)) );
}

unsigned char bitmap[ 0x4000 / 8 ];

/*
 * Macro versions of above
 */
#define SET_BITMAP_BIT(    bit, map )  \
              do { (map)[  (bit) >> 5] |=  (1 << ((bit) & 0x1f));  } while( 0 )
#define CLEAR_BITMAP_BIT(  bit, map )  \
              do { (map)[  (bit) >> 5] &= ~(1 << ((bit) & 0x1f));  } while( 0 )
#define BITMAP_BIT_IS_SET( bit, map )  \
              do { ((map)[ (bit) >> 5] &   (1 << ((bit) & 0x1f))); } while( 0 )

/*
 * ----------------------------------------------------------------------------
 * Create/destroy/reverse a singly-linked list.
 */
typedef struct elementStruct  {
    struct elementStruct *next;
    int                   value;
} element;

element  rawElementPool[ 100 ];
element *elementListHead = 0;

/*
 * Return specified element to the free list.
 */
void freeElement( element *e )
{
    e->next         = elementListHead;
    elementListHead = e;
}

/*
 * Construct the free list, using the pool of raw elements.
 */
void initElements()
{
    element *e = ARRAY_POINTER_MAX(rawElementPool);

    while( e >= rawElementPool )  {
        freeElement( e-- );
    }
}

/*
 * Return each element on the specified chain to the free list.
 */
void freeChain( element *chain )
{
    element *e;

    while( chain )  {
        e     = chain->next;
        freeElement( chain );
        chain = e;
    }
}

/*
 * Allocate an element from the free list.
 */
element *newElement( void )
{
    element *e;

    e = elementListHead;
    if( e )  {
        elementListHead = e->next;
        e->next         = 0;
    }
    return( e );
}

/*
 * Construct an element chain of the specified length.
 * No way to indicate fewer available elements than requested.
 */
element *elementChainOf( int len )
{
    element *e;
    element *chain;

    chain = 0;
    while( len-- )  {
        e = newElement();
        if( !e )  {
            return( chain );
        }
        e->next = chain;
        chain   = e;
    }

    return( chain );
}

/*
 * Reverse the specified chain, returning a pointer to its new anchor.
 */
element *reversedChain( element *chain )
{
    element *e;

    if( !chain || !(chain->next) )  {
        return( chain );
    }

    e                 = reversedChain( chain->next );
    chain->next->next = chain;
    chain->next       = 0;

    return( e );
}

/*
 * DEBUG - display values from the specified chain.
 */
void dumpChain( element *e )
{
    while( e )  {
        printf( " (0x%08lx[%2d]->0x%08lx)", (u32)(e), e->value, (u32)(e->next) );
        e = e->next;
    }
    printf( "\n" );
}

/*
 * ***************************************************************************
 * Circular buffer with generation numbers for tracking events during debug.
 * Needs mutex or something to be thread-safe.
 */
extern void MIKE_log_one( void *val, const char *func, int line, char *comment );
extern void MIKE_dump_info();

#define MIKE_LOG( val, comment ) MIKE_log_one( val, __func__, __LINE__, comment )
#define MIKE_DUMP()              MIKE_dump_info()

/*
 * ***************************************************************************
 */
#include <assert.h>

#define MIKE_INFO_SLOT_COUNT 100
#define NEXT_MIKE_ROTOR_FROM( x ) \
    ( ((x) + 1) > ARRAY_INDEX_MAX(mikeInfoSlot) ? 0 : ((x) + 1) ) ;

typedef struct mikeInfoStruct {
    unsigned    generation;
    void       *val;
    const char *func;
    int         line;
    char       *comment;
} mikeInfo;


mikeInfo mikeInfoSlot[ MIKE_INFO_SLOT_COUNT ];
unsigned mikeBusy       = 0;
unsigned mikeRotor      = 0;
unsigned mikeGeneration = 0;

void MIKE_log_one(
    void       *val,
    const char *func,
    int         line,
    char       *comment )
{
    mikeInfo *p;

    assert( !mikeBusy );
    mikeBusy = 1;

    p = &(mikeInfoSlot[mikeRotor]);
    mikeRotor     = NEXT_MIKE_ROTOR_FROM( mikeRotor );
    p->generation = mikeGeneration++;
    p->val        = val;
    p->func       = func;
    p->line       = line;
    p->comment    = comment;

    mikeBusy = 0;
}

void MIKE_dump_info()  {
    unsigned  rotor = mikeRotor;
    mikeInfo *info;

    do {
        info  = &(mikeInfoSlot[ rotor ]);
        printf( "SLOT:%03d LINE:%05d VAL:0x%08lx %s\n", rotor, info->line,
                                               (unsigned long)(info->val),
                                                               info->comment );
        rotor = NEXT_MIKE_ROTOR_FROM( rotor );
    } while ( rotor != mikeRotor );
}


/*
 * ----------------------------------------------------------------------------
 * Return nonzero if an ANCHORED scan of field matches target.
 * The NULL string is a substring of every string.
 */
int
isSubMatch(
    char *field,
    char *target )
{
    char  byteF;                                                   /* Field  */
    char  byteT;                                                   /* Target */

    while( 1 )  {
        if( !(byteT = *(target++)) )  {     /* End of Target counts as match */
            return( 1 );
        }
        if( !(byteF = *(field++)) )  {    /* End of Field counts as mismatch */
            return( 0 );
        }
        if( byteF != byteT )  {                 /* A strightforward mismatch */
            return( 0 );
        }
    }
}

/*
 * ----------------------------------------------------------------------------
 * Return nonzero if an UNANCHORED scan of field matches target.
 * The NULL string is a substring of every string.
 */
int
isSubString(
    char *field,
    char *target )
{
    if( !(*target) )  {
        return( 1 );
    }
    while( *field )  {
        if( isSubMatch( field, target )  )  {
            return( 1 );
        }
        ++field;
    }
    return( 0 );
}

/*
 * ----------------------------------------------------------------------------
 * Structure and union templates
 */

/*
 * ----------------------------------------------------------------------------
 * Data
 */
extern               char    *optarg;
extern               int      opterr;
extern               int      optind;
extern               int      optopt;

                     char   **origArgv;
                     int      origArgc;

/*
 * ----------------------------------------------------------------------------
 */
int
localMain( int    argc,
           char **argv,
           char **envp  )
{
    optarg    = NULL;

    if( argc < 2 )  {
        fprintf( stderr, "usage:\n\t%s ThisSpaceForRent\n", origArgv[ 0 ]  );
        exit( 1 );
    }

    while( 1 )  {
        unsigned long int  byte;

        byte = getopt( argc, argv, "n:N:s:S:vV" );

        if( byte == -1 )  {
            break;
        }
        switch( byte )  {
#ifdef  ENABLE_THESE_IF_NEEDED
        case 'n':
        case 'N': someInt      = atoi( optarg ); break;
        case 's':
        case 'S': someCharPtr  = optarg          break;
        case 'v':
        case 'V': verboseFlag  = TRUE;           break;
#endif                                      /* #ifdef ENABLE_THESE_IF_NEEDED */
        default:
            localMain( 1, origArgv, envp );
            exit( 1 );                                         /* NOTREACHED */
        }
    }

#ifdef  ENABLE_THESE_IF_NEEDED
    if( someKindOfProblemDeservingUsageMessageAndExit )  {
        localMain( 1, origArgv, envp );       /* Explain usage and bail out. */
    }

    srandom( time(0) * getpid() );
#endif                                      /* #ifdef ENABLE_THESE_IF_NEEDED */

#ifdef  MAYBE_YOUR_CODE_HERE
    for( argc=23; argc ; --argc )  {
        MIKE_LOG( (void *)((unsigned long)argc), "Hi, Mom!" );
    }
    MIKE_DUMP();
#endif                                        /* #ifdef MAYBE_YOUR_CODE_HERE */

    return( 0 );
}

/*
 * ----------------------------------------------------------------------------
 * So recursive calls to "main()" can work without reinvoking __main()
 */
int
main( int    argc,
      char **argv,
      char **envp  )
{
    origArgv = argv;
    origArgc = argc;

    return( localMain( argc, argv, envp )  );
}

END_OF_C_SKELETON

