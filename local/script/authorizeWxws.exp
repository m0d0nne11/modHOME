#!/usr/bin/expect -f

set user [ exec whoami ]
if { $user != "wxws" } {
   puts "\nauthorizeWxws.exp must be run as wxws.\n"
   exit
}

#get the wxws password
puts -nonewline stdout "Please enter the wxws password: "
flush stdout
gets stdin passwd
puts "\nChecking for WSI systems, please wait...\n\n"

# disable verbose logging
log_user 0

# harvest public keys and host keys for each host, generating them if necessary.

set prompt "\[wxws\@|:tty*>"
set timeout -1
set send_slow {2 .2}
proc send {ignore arg} {
        sleep .1
        exp_send -s -- $arg
}

set hostlist [ eval [ list exec cat /etc/hosts | grep -v "^#" | grep -v localhost |  sed -e "s/^\[0-9\.\]*\[ \t\]//" -e "s/^ *//g" -r | cut -d " " -f 1 ] ]
set goodhosts [ list ]

foreach host $hostlist {

  # filter out obviously bad lines
  switch -glob -- $host {
    "*127.0.0.1*" { continue }
    "" { continue }
    "*hcsn*" { continue }
    "*wpsn*" { continue }

  }

  # Of the lines that remain, filter out any that we cannot connect to
  set s [socket -async $host 22]
  after 1000
  fconfigure $s -blocking 0
  if {[catch {set res [gets $s]} res]} {
    continue
  }
  if {[fblocked $s]} {
    continue
  }

  # If we get this far, the host should be reachable and running SSH
        puts -nonewline "Checking host $host ... "
        spawn ssh -l wxws -o "StrictHostKeyChecking=no" $host
        match_max 100000

        expect {
    "Warning*$" { exp_continue }
          "Permanently added*$" { exp_continue }
          "refused" {puts "failed." ; continue }
          "No route" {puts "failed." ; continue }
        fingerprint {send -- "yes\r" ; exp_continue }
        password {send -- "$passwd\r" ; exp_continue }
        timeout    {puts "Connection to $host timed out." ; exit 1 }
        "$prompt"  {puts "OK - (up to 40seconds to process)" ; lappend goodhosts $host }
        }

        send -- "sh\r"
        expect "^*\$ $"

        send -- "if \[ ! -r /wxdisk/wxws/.ssh/id_dsa \] ; then ssh-keygen -t dsa -f /wxdisk/wxws/.ssh/id_dsa -q ; fi\r"
        expect {
          "Illegal option*$" { send -- "exit" ; send -- "exit" ; puts "  No SSHv2 support." ; continue }
        passphrase { send -- "\r" ; sleep 2 ; send -- "\r" ; exp_continue }
                again { send -- "\r" ; exp_continue }
        "^*\$ $"
        }

        send -- "cat /wxdisk/wxws/.ssh/id_dsa.pub\n"
        expect {
          "No such file or directory" { send -- "exit" ; send -- "exit" ; puts "  No SSHv2 support." ; continue }
          "Cannot open*$" { send -- "exit" ; send -- "exit" ; puts "  No SSHv2 support." ; continue }
        "ssh-dss*\r" { set pubkey $expect_out(0,string) }
        }

        send -- "if \[ -r /etc/ssh/ssh_host_rsa_key.pub \] ; then cat /etc/ssh/ssh_host_rsa_key.pub ; fi\r"
        expect {
        "ssh-rsa*\r" { set hostkey $expect_out(0,string) ; exp_continue }
        "^*\$ $"
        }

  send -- "if \[ ! -r /wxdisk/wxws/.ssh/config \] ; then echo \"Protocol 2,1\" >> /wxdisk/wxws/.ssh/config ; fi\r"
  expect "^*\$ $"

        send -- "exit\r"
        send -- "exit\r"
        expect eof

        set hostkeyfile [ open /tmp/$host.hostkey.txt w ]
        puts $hostkeyfile "$hostkey"
        close $hostkeyfile
        puts "  Recording hostkey from host: $host"

  if { $host != "localhost" } {
        set pubkeyfile [ open /tmp/$host.pubkey.txt w ]
        puts $pubkeyfile "$pubkey"
          close $pubkeyfile
        puts "  Recording public wxws key from host: $host"

  }
}

# generate global authorized keys file
set authkeylist [ glob /tmp/*.pubkey.txt ]
set keys ""
foreach authfile $authkeylist {
  set fp [open $authfile r]
        set key [read $fp]
        append keys "$key"
        close $fp
}
set fp [open "/tmp/global.pubkey.txt" w ]
puts $fp "$keys"
close $fp
exec chmod 600 /tmp/global.pubkey.txt

# distribute global authorized keys
foreach host $goodhosts {
        spawn scp -p -o "StrictHostKeyChecking no" /tmp/global.pubkey.txt wxws@$host:/wxdisk/wxws/.ssh/authorized_keys
        match_max 100000

        expect {
        "Permanently added*$" { exp_continue }
        "refused" {puts "failed." ; continue }
        "No route" {puts "Can't connect to $host" ; continue }
        fingerprint {send -- "yes\r" ; exp_continue }
        password {send -- "$passwd\r" ; exp_continue }
        timeout    {puts "Connection to $host timed out." ; exit 1 }
        "$prompt"
        }
        expect eof

        puts "Adding authorized keys to host: $host"
}

# generate and distribute host keys
set hostkeylist [ glob /tmp/*.hostkey.txt ]

foreach host $goodhosts {
  set keys ""
  foreach hostkeyfile $hostkeylist {
    set fp [open $hostkeyfile r ]
                set key [read $fp]
                set hname [ string range $hostkeyfile 5 [ string first .hostkey.txt $hostkeyfile -1] ]

                if { $hostkeyfile == "/tmp/$host.hostkey.txt" } {
                  append keys "localhost  $key"
                } else {
      append keys "$hname  $key"
          }
                close $fp
        }
        set fp [open "/tmp/known_hosts-$host" w]
  puts $fp $keys
        close $fp
        spawn scp -p -o "StrictHostKeyChecking no" /tmp/known_hosts-$host wxws@$host:/wxdisk/wxws/.ssh/known_hosts
        match_max 100000

        expect {
        "Permanently added*$" { exp_continue }
        "refused" {puts "failed." ; continue }
        "No route" {puts "Can't connect to $host" ; continue }
        fingerprint {send -- "yes\r" ; exp_continue }
        password {send -- "$passwd\r" ; exp_continue }
        timeout    {puts "Connection to $host timed out." ; exit 1 }
        "$prompt"
        }
        expect eof

        puts "Adding known_host keys to host: $host"
}

#cleanup
exec sh -c "rm -f /tmp/*key.txt"
exec sh -c "rm -f /tmp/known_hosts*"

puts "\nFinished.\n\n"

