# Compares two Linux kernel config files and generates a summary.
# mod 20030421
#
#TO-DO:
#   allow commandline specification of which comparisons you
#   actually want to see.


function usage()  {
    echo usage: $0 configFile1 configFile2
    exit 1
}

####
# These seem not to work as I expected...
#
allow_null_glob_expansion=setInScriptFile
set +f

####
# The timeStamp is handy for generating any
# unique-per-script-invocation temp files and such...
#
timeStamp=$(date '+%Y%m%d%H%M%S')
  md5List=md5List$timeStamp
  tempDir=/tmp/tempDir$timeStamp
     dir1=$tempDir/dir1
     dir2=$tempDir/dir2

if [ ! $# -eq 2 ]
then
    echo must mention two config files
    usage
fi

if [ ! -f $1 ]
then
    echo $1 not a file
    usage
fi

if [ ! -f $2 ]
then
    echo $2 not a file
    usage
fi

if diff -q $1 $2 >/dev/null
then
    echo "#### FILES ARE IDENTICAL"
    exit 0
fi

if diff -qb $1 $2 >/dev/null
then
    echo "#### FILES ARE IDENTICAL EXCEPT FOR WHITESPACE"
    exit 0
fi

mkdir -p $dir1 $dir2

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
function eatwhite() {
  sed -r -e 's/[[:space:]]+/ /g' -e 's/[[:space:]]+$//g'
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
function diffLinuxConfigFunc()  {
    eatwhite < $1                           \    
    | grep -e 'CONFIG.*='                   \
           -e 'CONFIG.* is not set'         \
    | sed  -e '/^\#.* is not set/s/^\# *//' \
    | sort -bfd                             \
    | uniq > $tempFile1

    eatwhite < $2                           \
    | grep -e 'CONFIG.*='                   \
           -e 'CONFIG.* is not set'         \
    | sed  -e '/^\#.* is not set/s/^\# *//' \
    | sort -bfd                             \
    | uniq > $tempFile2

    sdiff $tempFile1 $tempFile2
    rm -f $tempFile1 $tempFile2
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Build dir1/token/{EN,DIS}ABLED files for every item in file1

fgrep CONFIG_ $1 | while read rawLine
do
    echo "$rawLine" | grep -e '^[[:space:]]*#' >/dev/null
    enabled=$?
    if [ $enabled -eq 0 ]
    then                                                             # Disabled
        line=$(echo "$rawLine" | sed -e 's/^[[:space:]]*#[[:space:]]*//' )
    else                                                              # Enabled
        line=$(echo "$rawLine" | sed -e 's/^[[:space:]]*//' )
    fi
    token=$(echo $line  | sed -e 's/[[:space:]] =].*$//' )

    mkdir -p $dir1/$token
    if [ $enabled -eq 0 ]
    then                                                             # Disabled
#echo "######## DISABLED1 <$token> <$rawLine>"
        echo "$rawLine" >$dir1/$token/DISABLED
    else                                                              # Enabled
#echo "######## ENABLED1 <$token> <$rawLine>"
        echo "$rawLine" >$dir1/$token/ENABLED
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Build dir2/token/{EN,DIS}ABLED files for every item in file2

fgrep CONFIG_ $2 | while read rawLine
do
    echo "$rawLine" | grep -e '^[[:space:]]*#' >/dev/null
    enabled=$?
    if [ $enabled -eq 0 ]
    then                                                             # Disabled
        line=$(echo "$rawLine" | sed -e 's/^[[:space:]]*#[[:space:]]*//' )
    else                                                              # Enabled
        line=$(echo "$rawLine" | sed -e 's/^[[:space:]]*//' )
    fi
    token=$(echo $line  | sed -e 's/[[:space:]] =].*$//' )

    mkdir -p $dir2/$token
    if [ $enabled -eq 0 ]
    then                                                             # Disabled
#echo "#### DISABLED2 <$token> <$rawLine>"
        echo "$rawLine" >$dir2/$token/DISABLED
    else                                                              # Enabled
#echo "#### ENABLED2 <$token> <$rawLine>"
        echo "$rawLine" >$dir2/$token/ENABLED
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# We now have a basic indication of which tokens are {EN,DIS}ABLED.
# If we've somehow ended up with both kinds of definitions for any token
# we assume the ENABLED state takes precedence and we therefore toss the
# DISABLED.  This should normally not happen but might be possible with
# hand-tweaked config files.

for dir in $dir1 $dir2
do
    cd $dir
    for token in *
    do
        if [ -f $token/ENABLED ]
        then
            if [ -f $token/DISABLED ]
            then
                echo "#### $token both DISABLED and ENABLED ?"
                rm $token/DISABLED
            fi
        fi
    done
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens that are DISABLED in config1
# but not even mentioned in config2

cd $dir1
for token in *
do
    if [ -f $token/DISABLED ]
    then
        if [ ! -d "$dir2/$token" ]        # Not even mentioned in other config?
        then
            echo   $token >>$tempDir/uniqueDISABLED1
            rm -rf $token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens that are ENABLED in config1
# but not even mentioned in config2

cd $dir1
for token in *
do
    if [ -f $token/ENABLED ]
    then
        if [ ! -d "$dir2/$token" ]        # Not even mentioned in other config?
        then
            cat $token/ENABLED >>$tempDir/uniqueENABLED1
            rm -rf $token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens that are DISABLED in config2
# but not even mentioned in config1

cd $dir2
for token in *
do
    if [ -f $token/DISABLED ]
    then
        if [ ! -d "$dir1/$token" ]        # Not even mentioned in other config?
        then
            echo   $token >>$tempDir/uniqueDISABLED2
            rm -rf $token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens that are ENABLED in config2
# but not even mentioned in config1

cd $dir2
for token in *
do
    if [ -f $token/ENABLED ]
    then
        if [ ! -d "$dir1/$token" ]        # Not even mentioned in other config?
        then
            cat $token/ENABLED >>$tempDir/uniqueENABLED2
            rm -rf $token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens that are DISABLED in both configs

cd $dir1
for token in *
do
    if [ -f $token/DISABLED ]
    then
        if [ -f $dir2/$token/DISABLED ]
        then
            echo   $token >>$tempDir/commonDISABLED
            rm -rf $token $dir2/$token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for identically ENABLED tokens in both configs

cd $dir1
for token in *
do
    if [ -f $token/ENABLED ]
    then
        if [ -f $dir2/$token/ENABLED ]
        then
            if diff -qb $token/ENABLED $dir2/$token/ENABLED >/dev/null
            then
                cat $token/ENABLED >>$tempDir/commonENABLED
                rm -rf $token $dir2/$token
            fi
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for differently ENABLED tokens in both configs

cd $dir1
for token in *
do
    if [ -f $token/ENABLED ]
    then
        if [ -f $dir2/$token/ENABLED ]
        then
            x1=$(sed -e 's/^.*=/[[:space:]]=/' <      $token/ENABLED)
            x2=$(sed -e 's/^.*=/[[:space:]]=/' <$dir2/$token/ENABLED)
            echo "$token$x1 (vs)$x2" >>$tempDir/differentlyENABLED
            rm -rf $token $dir2/$token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens ENABLED in dir1 but DISABLED in dir2

cd $dir1
for token in *
do
    if [ -f $token/ENABLED ]
    then
        if [ -f $dir2/$token/DISABLED ]
        then
            cat $token/ENABLED >>$tempDir/enabled1disabled2
            rm -rf $token $dir2/$token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Look for tokens ENABLED in dir2 but DISABLED in dir1

cd $dir2
for token in *
do
    if [ -f $token/ENABLED ]
    then
        if [ -f $dir1/$token/DISABLED ]
        then
            cat $token/ENABLED >>$tempDir/enabled2disabled1
            rm -rf $token $dir1/$token
        fi
    fi
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Generate the summary:

echo "########" Comparison of kernel config files $1 and $2

if [ -f $tempDir/commonDISABLED ]
then
    echo ; echo "####" Common DISABLED options:
    fmt < $tempDir/commonDISABLED
fi

if [ -f $tempDir/uniqueDISABLED1 ]
then
    echo ; echo "#### DISABLED options unique to $1":
    fmt < $tempDir/uniqueDISABLED1
fi

if [ -f $tempDir/uniqueDISABLED2 ]
then
    echo ; echo "#### DISABLED options unique to $2":
    fmt < $tempDir/uniqueDISABLED2
fi

if [ -f $tempDir/commonENABLED ]
then
    echo ; echo "####" Common ENABLED options:
    cat $tempDir/commonENABLED
fi

if [ -f $tempDir/uniqueENABLED1 ]
then
    echo ; echo "#### ENABLED options unique to $1":
    cat $tempDir/uniqueENABLED1
fi

if [ -f $tempDir/uniqueENABLED2 ]
then
    echo ; echo "#### ENABLED options unique to $2":
    cat $tempDir/uniqueENABLED2
fi

if [ -f $tempDir/differentlyENABLED ]
then
    echo ; echo "#### Differently ENABLED options: $1 (vs) $2"
    cat $tempDir/differentlyENABLED
fi

if [ -f $tempDir/enabled1disabled2 ]
then
    echo ; echo "#### Common options ENABLED in $1 but DISABLED in $2":
    cat $tempDir/enabled1disabled2
fi

if [ -f $tempDir/enabled2disabled1 ]
then
    echo ; echo "#### Common options DISABLED in $1 but ENABLED in $2":
    cat $tempDir/enabled2disabled1
fi

rm -rf $tempDir

exit 0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ALTERNATE ENDING...

echo "########" Comparison of kernel config files $1 and $2

[ -f $tempDir/commonDISABLED ] && \
   (echo ; echo "####" Common DISABLED options: ; \
    fmt < $tempDir/commonDISABLED )

[ -f $tempDir/uniqueDISABLED1 ] && \
   (echo ; echo "#### DISABLED options unique to $1": ; \
    fmt < $tempDir/uniqueDISABLED1 )

[ -f $tempDir/uniqueDISABLED2 ] && \
   (echo ; echo "#### DISABLED options unique to $2": ; \
    fmt < $tempDir/uniqueDISABLED2 )

[ -f $tempDir/commonENABLED ] && \
   (echo ; echo "####" Common ENABLED options: ; \
    cat $tempDir/commonENABLED )

[ -f $tempDir/uniqueENABLED1 ] && \
   (echo ; echo "#### ENABLED options unique to $1": ; \
    cat $tempDir/uniqueENABLED1 )

[ -f $tempDir/uniqueENABLED2 ] && \
   (echo ; echo "#### ENABLED options unique to $2": ; \
    cat $tempDir/uniqueENABLED2 )

[ -f $tempDir/differentlyENABLED ] && \
   (echo ; echo "#### Differently ENABLED options: $1 (vs) $2" ; \
    cat $tempDir/differentlyENABLED )

[ -f $tempDir/enabled1disabled2 ] && \
   (echo ; echo "#### Common options ENABLED in $1 but DISABLED in $2": ; \
    cat $tempDir/enabled1disabled2 )

[ -f $tempDir/enabled2disabled1 ] && \
   (echo ; echo "#### Common options DISABLED in $1 but ENABLED in $2": ; \
    cat $tempDir/enabled2disabled1 )

rm -rf $tempDir

